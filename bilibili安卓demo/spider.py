import base64

b = bytearray([0x4e,0x6a,0x49,0x31,0x4f,0x7a,0x41,0x33,0x59,0x47,0x41,0x75,0x4e,0x6a,0x4e,0x6d,0x4e,0x7a,0x63,0x37,0x59,0x6d,0x55,0x3d])
c = bytearray([0x59,0x57,0x42,0x6c,0x4f,0x6d,0x5a,0x6e,0x4e,0x6a,0x41,0x75,0x4f,0x6d,0x4a,0x6d,0x4e,0x7a,0x41,0x78,0x4f,0x32,0x59,0x3d])

class Encrypt():

    def a(self,p0,p1):
        for i in range(len(p0)):
            p0[i] = p0[i]^p1
        return p0

    def b(self,p0):
        return base64.b64decode(bytearray(p0).decode())

    def jb2pb(self,byte_arr:bytearray):

        return [i + 256 if i < 0 else i for i in byte_arr]

def start(value):
    encrypt = Encrypt()
    p0 = encrypt.jb2pb(value)
    p0 = encrypt.b(p0)
    p0 = encrypt.a(bytearray(p0), 3)
    print(p0)


if __name__ == '__main__':
    start(b)
    start(c)


